// Code generated by MockGen. DO NOT EDIT.
// Source: repository/car_repository_interface.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/aabdullahgungor/go-restapi-mock/model"
	gomock "github.com/golang/mock/gomock"
)

// MockICarRepository is a mock of ICarRepository interface.
type MockICarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICarRepositoryMockRecorder
}

// MockICarRepositoryMockRecorder is the mock recorder for MockICarRepository.
type MockICarRepositoryMockRecorder struct {
	mock *MockICarRepository
}

// NewMockICarRepository creates a new mock instance.
func NewMockICarRepository(ctrl *gomock.Controller) *MockICarRepository {
	mock := &MockICarRepository{ctrl: ctrl}
	mock.recorder = &MockICarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICarRepository) EXPECT() *MockICarRepositoryMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockICarRepository) CreateCar(car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", car)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockICarRepositoryMockRecorder) CreateCar(car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockICarRepository)(nil).CreateCar), car)
}

// DeleteCar mocks base method.
func (m *MockICarRepository) DeleteCar(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockICarRepositoryMockRecorder) DeleteCar(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockICarRepository)(nil).DeleteCar), id)
}

// EditCar mocks base method.
func (m *MockICarRepository) EditCar(car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCar", car)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCar indicates an expected call of EditCar.
func (mr *MockICarRepositoryMockRecorder) EditCar(car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCar", reflect.TypeOf((*MockICarRepository)(nil).EditCar), car)
}

// GetAllCars mocks base method.
func (m *MockICarRepository) GetAllCars() ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCars")
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCars indicates an expected call of GetAllCars.
func (mr *MockICarRepositoryMockRecorder) GetAllCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCars", reflect.TypeOf((*MockICarRepository)(nil).GetAllCars))
}

// GetCarById mocks base method.
func (m *MockICarRepository) GetCarById(id string) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarById", id)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarById indicates an expected call of GetCarById.
func (mr *MockICarRepositoryMockRecorder) GetCarById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarById", reflect.TypeOf((*MockICarRepository)(nil).GetCarById), id)
}
